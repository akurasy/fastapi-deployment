name: "Build fast api and push to ecr"

on:
  workflow_dispatch:
  push:
    branches:
      - main

env: 
  REGION: us-east-1
  ECR_DOCKER_IMAGE: fast-api-repo
  ECS_SERVICE: fastapi-svc
  ECS_CLUSTER: fast-api-cluster
  ECS_TASK_DEFINITION: fastapi-svc
  AWS_REGION: us-east-1
  CONTAINER_NAME: fastapi

jobs:

  deploy-terraform:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialize Terraform
        run: terraform init

      - name: Validate Terraform
        run: terraform validate

      - name: terraform plan
        run: terraform plan

      - name: format terraform
        run: terraform fmt

      - name: apply terraform
        run: terraform apply --auto-approve

  build-image:
    runs-on: ubuntu-latest
    needs: deploy-terraform
    defaults:
      run:
        working-directory: ./src

    steps:
      - name: Checkout Codebase
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github
            src

      - name: Get repo short sha
        uses: benjlevesque/short-sha@v3.0
        id: short-sha
        with:
          length: 6

      - name: Setup AWS ECR Details
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}

      - name: Login to Amazon ECR
        id: login-pf-aws-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push the tagged docker image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_DOCKER_IMAGE }}
          IMAGE_TAG: ${{ steps.short-sha.outputs.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_DOCKER_IMAGE:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}


      
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
